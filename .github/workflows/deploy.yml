name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8'
  AWS_REGION: 'us-east-1'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Deploy infrastructure
        working-directory: apps/infrastructure
        run: |
          cdk bootstrap
          cdk deploy --require-approval never

      - name: Deploy API to Lambda
        run: |
          cd apps/api
          zip -r api.zip dist/
          aws lambda update-function-code \
            --function-name template-api \
            --zip-file fileb://api.zip

      - name: Deploy frontend to S3
        run: |
          aws s3 sync apps/web/dist/ s3://template-website-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.AWS_REGION }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "index.html" \
            --exclude "*.js" \
            --exclude "*.css"

          aws s3 cp apps/web/dist/index.html s3://template-website-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.AWS_REGION }}/ \
            --cache-control "public, max-age=0, must-revalidate"

          aws s3 cp apps/web/dist/ s3://template-website-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.AWS_REGION }}/ \
            --recursive \
            --exclude "*" \
            --include "*.js" \
            --include "*.css" \
            --cache-control "public, max-age=31536000"

      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name TemplateInfrastructureStack \
            --query "Stacks[0].Outputs[?OutputKey=='DistributionId'].OutputValue" \
            --output text)

          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"

      - name: Get deployment URL
        run: |
          WEBSITE_URL=$(aws cloudformation describe-stacks \
            --stack-name TemplateInfrastructureStack \
            --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" \
            --output text)

          echo "üöÄ Deployment complete!"
          echo "üåê Website URL: $WEBSITE_URL"
