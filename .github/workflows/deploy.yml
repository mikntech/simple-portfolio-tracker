name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    # environment: development  # Uncomment if you create GitHub environments

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy infrastructure
        run: |
          # Deploy base infrastructure
          cd packages/base-infra
          STAGE=dev DOMAIN_NAME=${{ secrets.DEV_DOMAIN_NAME }} npm run cdk bootstrap || true
          STAGE=dev DOMAIN_NAME=${{ secrets.DEV_DOMAIN_NAME }} npm run cdk -- deploy --require-approval never --outputs-file outputs.json
          cd ../..

          # Deploy auth infrastructure
          cd packages/auth-infra
          STAGE=dev \
          GOOGLE_CLIENT_ID=${{ secrets.DEV_GOOGLE_CLIENT_ID }} \
          GOOGLE_CLIENT_SECRET=${{ secrets.DEV_GOOGLE_CLIENT_SECRET }} \
          WEB_DOMAIN=app.${{ secrets.DEV_DOMAIN_NAME }} \
          COGNITO_DOMAIN_PREFIX=${{ secrets.DEV_COGNITO_DOMAIN_PREFIX || 'portfolio-tracker-dev' }} \
          npm run cdk -- deploy --require-approval never --outputs-file outputs.json
          cd ../..

          # Deploy portfolio service
          cd packages/portfolio-service/cdk
          STAGE=dev npm run cdk -- deploy --require-approval never
          cd ../../..

          # Deploy web infrastructure
          cd packages/web-infra
          STAGE=dev DOMAIN_NAME=${{ secrets.DEV_DOMAIN_NAME }} npm run cdk -- deploy --require-approval never --outputs-file outputs.json
          cd ../..

      - name: Extract CDK outputs
        id: cdk-outputs
        run: |
          # Extract API URL from base-infra outputs
          API_URL=$(jq -r '.BaseInfraStack.ApiGatewayUrl' packages/base-infra/outputs.json)
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT

          # Extract auth outputs
          USER_POOL_ID=$(jq -r '.AuthInfraStack.UserPoolId' packages/auth-infra/outputs.json)
          CLIENT_ID=$(jq -r '.AuthInfraStack.UserPoolClientId' packages/auth-infra/outputs.json)
          COGNITO_DOMAIN=$(jq -r '.AuthInfraStack.CognitoDomain' packages/auth-infra/outputs.json)
          echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_OUTPUT
          echo "COGNITO_DOMAIN=$COGNITO_DOMAIN" >> $GITHUB_OUTPUT

          # Extract web infra outputs
          S3_BUCKET=$(jq -r '.WebInfraStack.WebBucketName' packages/web-infra/outputs.json)
          DISTRIBUTION_ID=$(jq -r '.WebInfraStack.DistributionId' packages/web-infra/outputs.json)
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Build web application
        run: |
          cd packages/web

          # Create .env file with CDK outputs
          cat > .env << EOF
          VITE_API_URL=${{ steps.cdk-outputs.outputs.API_URL }}
          VITE_COGNITO_USER_POOL_ID=${{ steps.cdk-outputs.outputs.USER_POOL_ID }}
          VITE_COGNITO_CLIENT_ID=${{ steps.cdk-outputs.outputs.CLIENT_ID }}
          VITE_COGNITO_DOMAIN=${{ steps.cdk-outputs.outputs.COGNITO_DOMAIN }}
          VITE_REDIRECT_SIGN_IN=https://app.${{ secrets.DEV_DOMAIN_NAME }}/
          VITE_REDIRECT_SIGN_OUT=https://app.${{ secrets.DEV_DOMAIN_NAME }}/
          EOF

          # Build the application
          pnpm build

      - name: Deploy web application to S3
        run: |
          aws s3 sync packages/web/dist/ s3://${{ steps.cdk-outputs.outputs.S3_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "index.html" \
            --exclude "*.json"

          # Upload HTML and JSON files with no cache
          aws s3 cp packages/web/dist/index.html s3://${{ steps.cdk-outputs.outputs.S3_BUCKET }}/index.html \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cdk-outputs.outputs.DISTRIBUTION_ID }} \
            --paths "/*"

  deploy-prod:
    runs-on: ubuntu-latest
    # environment: production  # Uncomment if you create GitHub environments
    needs: deploy-dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy infrastructure
        run: |
          # Deploy base infrastructure
          cd packages/base-infra
          STAGE=prod DOMAIN_NAME=${{ secrets.PROD_DOMAIN_NAME }} npm run cdk bootstrap || true
          STAGE=prod DOMAIN_NAME=${{ secrets.PROD_DOMAIN_NAME }} npm run cdk -- deploy --require-approval never --outputs-file outputs.json
          cd ../..

          # Deploy auth infrastructure
          cd packages/auth-infra
          STAGE=prod \
          GOOGLE_CLIENT_ID=${{ secrets.PROD_GOOGLE_CLIENT_ID }} \
          GOOGLE_CLIENT_SECRET=${{ secrets.PROD_GOOGLE_CLIENT_SECRET }} \
          WEB_DOMAIN=app.${{ secrets.PROD_DOMAIN_NAME }} \
          COGNITO_DOMAIN_PREFIX=${{ secrets.PROD_COGNITO_DOMAIN_PREFIX || 'portfolio-tracker-prod' }} \
          npm run cdk -- deploy --require-approval never --outputs-file outputs.json
          cd ../..

          # Deploy portfolio service
          cd packages/portfolio-service/cdk
          STAGE=prod npm run cdk -- deploy --require-approval never
          cd ../../..

          # Deploy web infrastructure
          cd packages/web-infra
          STAGE=prod DOMAIN_NAME=${{ secrets.PROD_DOMAIN_NAME }} npm run cdk -- deploy --require-approval never --outputs-file outputs.json
          cd ../..

      - name: Extract CDK outputs
        id: cdk-outputs
        run: |
          # Extract API URL from base-infra outputs
          API_URL=$(jq -r '.BaseInfraStack.ApiGatewayUrl' packages/base-infra/outputs.json)
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT

          # Extract auth outputs
          USER_POOL_ID=$(jq -r '.AuthInfraStack.UserPoolId' packages/auth-infra/outputs.json)
          CLIENT_ID=$(jq -r '.AuthInfraStack.UserPoolClientId' packages/auth-infra/outputs.json)
          COGNITO_DOMAIN=$(jq -r '.AuthInfraStack.CognitoDomain' packages/auth-infra/outputs.json)
          echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_OUTPUT
          echo "COGNITO_DOMAIN=$COGNITO_DOMAIN" >> $GITHUB_OUTPUT

          # Extract web infra outputs
          S3_BUCKET=$(jq -r '.WebInfraStack.WebBucketName' packages/web-infra/outputs.json)
          DISTRIBUTION_ID=$(jq -r '.WebInfraStack.DistributionId' packages/web-infra/outputs.json)
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Build web application
        run: |
          cd packages/web

          # Create .env file with CDK outputs
          cat > .env << EOF
          VITE_API_URL=${{ steps.cdk-outputs.outputs.API_URL }}
          VITE_COGNITO_USER_POOL_ID=${{ steps.cdk-outputs.outputs.USER_POOL_ID }}
          VITE_COGNITO_CLIENT_ID=${{ steps.cdk-outputs.outputs.CLIENT_ID }}
          VITE_COGNITO_DOMAIN=${{ steps.cdk-outputs.outputs.COGNITO_DOMAIN }}
          VITE_REDIRECT_SIGN_IN=https://app.${{ secrets.PROD_DOMAIN_NAME }}/
          VITE_REDIRECT_SIGN_OUT=https://app.${{ secrets.PROD_DOMAIN_NAME }}/
          EOF

          # Build the application
          pnpm build

      - name: Deploy web application to S3
        run: |
          aws s3 sync packages/web/dist/ s3://${{ steps.cdk-outputs.outputs.S3_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "index.html" \
            --exclude "*.json"

          # Upload HTML and JSON files with no cache
          aws s3 cp packages/web/dist/index.html s3://${{ steps.cdk-outputs.outputs.S3_BUCKET }}/index.html \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cdk-outputs.outputs.DISTRIBUTION_ID }} \
            --paths "/*"
